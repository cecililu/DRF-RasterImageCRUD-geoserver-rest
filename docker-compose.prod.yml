version: "3"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - ${WEB_APP_PORT}:8000
    volumes:
      - ./sock/:/sock/
      - ./:/code
      - ./logs/:/logs/
    entrypoint: sh /code/docker-entrypoint.prod.sh
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - ${PROJECT_NAME}_nw
    # healthcheck:
    #   interval: 1m
    #   timeout: 5s
    #   retries: 5
    #   test:
    #     curl http://localhost:8000 || bash -c 'kill -s 15 -1 && (sleep 10; kill -s 9 -1)' #written in a manner that if healthcheck fails every process is killed and container restarts
      # start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "300M"

  db:
    image: mdillon/postgis:11-alpine
    restart: always
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    # ports:
    #   - 5432:5432
    env_file:
      - .pg_env
    networks:
      - ${PROJECT_NAME}_nw
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "200M"

  redis:
    image: redis:alpine
    restart: always
    entrypoint: redis-server --appendonly yes
    # ports:
    #   - 6379:6379
    volumes:
      - ./_redis_data:/var/lib/redis
      - ./redis/rc.local:/etc/rc.local
    networks:
      - ${PROJECT_NAME}_nw
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "200M"

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    entrypoint: "celery -A project worker -f /logs/worker.log -l DEBUG"
    depends_on:
      - web
      - redis
    volumes:
      - .:/code
      - ./logs/:/logs/
    env_file:
      - .env
    networks:
      - ${PROJECT_NAME}_nw
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "250M"

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    entrypoint: "celery -A project beat -f /logs/worker.log -l DEBUG"
    depends_on:
      - web
      - redis
    volumes:
      - .:/code
      - ./logs/:/logs/
    env_file:
      - .env
    networks:
      - ${PROJECT_NAME}_nw
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "250M"

  # nginx:
  #   image: nginx:latest
  #   restart: always
  #   # ports:
  #   #   - 80:80
  #   #   - 443:443
  #   volumes:
  #     - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf   # Change nginx/nginx-proxy-sample.conf to nginx-proxy.conf
  #     - ./frontend_app/dist:/var/www/frontend
  #     - ./sock/:/sock/
  #     - ./logs/nginx:/var/log/nginx
  #     - ./static:/static
  #   depends_on:
  #     - web
  #     - worker
  #   networks:
  #     - ${PROJECT_NAME}_nw
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.2"
  #         memory: "200M"

networks:
  ${PROJECT_NAME}_nw:
    driver: bridge
